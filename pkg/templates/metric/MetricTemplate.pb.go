// Code generated by protoc-gen-go.
// source: mixer/pkg/templates/metric/MetricTemplate.proto
// DO NOT EDIT!

package istio_mixer_adapter_metric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import istio_mixer_v1_config_descriptor "istio.io/api/mixer/v1/config/descriptor"
import _ "istio.io/mixer/pkg/templates/mixer"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Constructor struct {
	Value      istio_mixer_v1_config_descriptor.ValueType            `protobuf:"varint,2,opt,name=value,enum=istio.mixer.v1.config.descriptor.ValueType" json:"value,omitempty"`
	Dimensions map[string]istio_mixer_v1_config_descriptor.ValueType `protobuf:"bytes,3,rep,name=dimensions" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=istio.mixer.v1.config.descriptor.ValueType"`
}

func (m *Constructor) Reset()                    { *m = Constructor{} }
func (m *Constructor) String() string            { return proto.CompactTextString(m) }
func (*Constructor) ProtoMessage()               {}
func (*Constructor) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Constructor) GetValue() istio_mixer_v1_config_descriptor.ValueType {
	if m != nil {
		return m.Value
	}
	return istio_mixer_v1_config_descriptor.VALUE_TYPE_UNSPECIFIED
}

func (m *Constructor) GetDimensions() map[string]istio_mixer_v1_config_descriptor.ValueType {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func init() {
	proto.RegisterType((*Constructor)(nil), "istio.mixer.adapter.metric.Constructor")
}

func init() { proto.RegisterFile("mixer/pkg/templates/metric/MetricTemplate.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x82, 0x05, 0x37, 0xa0, 0x90, 0x53, 0xc8, 0x29, 0x78, 0x0a, 0x14, 0x66, 0x69,
	0x3c, 0x28, 0x3d, 0xaa, 0x3d, 0x89, 0xb7, 0xe2, 0x51, 0x89, 0xc9, 0x58, 0x96, 0x36, 0xbb, 0xcb,
	0xee, 0x34, 0x34, 0xaf, 0xe0, 0xb5, 0x6f, 0xa6, 0xaf, 0xd0, 0x67, 0x10, 0x8f, 0xe2, 0x6e, 0xd4,
	0x22, 0x7a, 0xf2, 0xb4, 0xf0, 0xb3, 0xff, 0xff, 0x7f, 0x33, 0xc3, 0x78, 0x2b, 0x36, 0x68, 0xb8,
	0x5e, 0x2e, 0x38, 0x61, 0xab, 0x57, 0x15, 0xa1, 0xe5, 0x2d, 0x92, 0x11, 0x35, 0xbf, 0x71, 0xcf,
	0x7c, 0x90, 0x41, 0x1b, 0x45, 0x2a, 0xc9, 0x84, 0x25, 0xa1, 0xc0, 0xd9, 0xa0, 0x6a, 0x2a, 0x4d,
	0x68, 0xc0, 0x1b, 0xb2, 0xb1, 0x0f, 0xeb, 0x26, 0xbc, 0x56, 0xf2, 0x51, 0x2c, 0x78, 0x83, 0xb6,
	0x36, 0x42, 0x93, 0x32, 0xbc, 0xab, 0x56, 0x6b, 0xbc, 0xa7, 0x5e, 0x0f, 0x41, 0x59, 0xf9, 0x6b,
	0xb3, 0xd3, 0x3e, 0x2b, 0x67, 0x1b, 0x42, 0x69, 0x85, 0x92, 0xd6, 0x7b, 0x4e, 0x5e, 0x03, 0x16,
	0x5f, 0x2a, 0x69, 0xc9, 0xac, 0x6b, 0x52, 0x26, 0x99, 0xb2, 0x03, 0x97, 0x9b, 0x86, 0x79, 0x50,
	0x1c, 0x95, 0x63, 0xd8, 0x87, 0xeb, 0x26, 0xe0, 0x31, 0xe0, 0x1b, 0x03, 0x6e, 0x3f, 0xbe, 0xcf,
	0x7b, 0x8d, 0xc9, 0x35, 0x63, 0x8d, 0x68, 0x87, 0xfc, 0x34, 0xca, 0xa3, 0x22, 0x2e, 0xcf, 0xe0,
	0xef, 0xe9, 0x60, 0xaf, 0x18, 0xae, 0xbe, 0x9c, 0x33, 0x49, 0xa6, 0xcf, 0xee, 0xd8, 0xf1, 0x0f,
	0x29, 0x89, 0x59, 0xb4, 0xc4, 0x3e, 0x0d, 0xf2, 0xa0, 0x38, 0xfc, 0x0f, 0xe8, 0x34, 0x3c, 0x0f,
	0x2e, 0x92, 0xb7, 0xe7, 0xdd, 0x36, 0x0c, 0x9f, 0x5e, 0x76, 0xdb, 0x70, 0xe4, 0xef, 0xf2, 0x30,
	0x72, 0x3b, 0x39, 0x7d, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x54, 0xcb, 0x87, 0x67, 0xc3, 0x01, 0x00,
	0x00,
}
