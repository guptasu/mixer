syntax = "proto3";


import "mixer/v1/config/descriptor/value_type.proto";
import "mixer/tools/codegenFromTemplates/TemplateExtensions.proto";

package istio.mixer.v1.config;

message MetricTemplate {
    option (istio.mixer.v1.config.template.template_variety) = TEMPLATE_VARIETY_REPORT;
    option (istio.mixer.v1.config.template.template_name) = "Metric";

    message MetricTypeParam {
        istio.mixer.v1.config.descriptor.ValueType value = 1;
        map<string, istio.mixer.v1.config.descriptor.ValueType> dimensions = 2;
        string description = 3;
        Kind kind = 4;
    }

    message MetricConstructorParam {
        string value = 1 [(istio.mixer.v1.config.template.is_expression) = true];
        // This implies that values of the map are going to be expressions.
        map<string, string> dimensions = 2 [(istio.mixer.v1.config.template.is_expression) = true];
    }
}

enum Kind {
    METRIC_KIND_UNSPECIFIED = 0;
    GAUGE = 1;
    COUNTER = 2;
    DISTRIBUTION = 3;
}

message LinearBuckets {
    int32 num_finite_buckets = 1;
    double width = 2;
    double offset = 3;
}

message ExponentialBuckets {
    int32 num_finite_buckets = 1;
    double growth_factor = 2;
    double scale = 3;
}

message ExplicitBuckets {
    repeated double bounds = 1;
}

message BucketsDefinition {
    oneof definition {
        LinearBuckets linear_buckets = 1;
        ExponentialBuckets exponential_buckets = 2;
        ExplicitBuckets explicit_buckets = 3;
    }
}
